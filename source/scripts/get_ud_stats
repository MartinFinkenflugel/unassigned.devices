#!/usr/bin/php
<?php
/* Copyright 2020-2021, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin			= "unassigned.devices";
$docroot		= $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$config_file	= "/tmp/{$plugin}/config/samba_mount.cfg";
$tc 			= "/var/state/{$plugin}/ping_status.json";

$COMMAND = $argv[1];

/* Unassigned Devices logging. */
function unassigned_log($m, $type = "NOTICE") {
	global $plugin;

	if ($type != "DEBUG" || $GLOBALS["VERBOSE"]) {
		$m		= print_r($m,true);
		$m		= str_replace("\n", " ", $m);
		$m		= str_replace('"', "'", $m);
		exec("/usr/bin/logger"." ".escapeshellarg($m)." -t ".escapeshellarg($plugin));
	}
}

/* Run a command and time out if it doesn't complete in the $timeout number of seconds. */
function timed_exec($timeout = 10, $cmd) {
	$time		= -microtime(true); 
	$out		= shell_exec("/usr/bin/timeout ".escapeshellarg($timeout)." ".$cmd);
	$time		+= microtime(true);
	if ($time >= $timeout) {
		unassigned_log("Error: shell_exec(".$cmd.") took longer than ".sprintf('%d', $timeout)."s!");
		$out	= "command timed out";
	} else {
		unassigned_log("Timed Exec: shell_exec(".$cmd.") took ".sprintf('%f', $time)."s!", "DEBUG");
	}
	return $out;
}

/* Confirm we have a good ip address. */
function is_ip($str) {
	return filter_var($str, FILTER_VALIDATE_IP);
}

/* Check for text in a file. */
function exist_in_file($file, $text) {
	return (preg_grep("%{$text}%", @file($file))) ? true : false;
}

/* Is the server currently on line. */
function is_server_online($server) {
	global $tc;

	/* Check the last ping status. */
	$ping_status	= is_file($tc) ? json_decode(file_get_contents($tc),true) : array();
	$was_alive		= ($ping_status[$server]['online'] == 'yes') ? true : false;
	$is_alive		= (trim(exec("/bin/ping -c 1 -W 1 ".escapeshellarg($server)." >/dev/null 2>&1; echo $?")) == 0 ) ? true : false;
	$no_pings		= isset($ping_status[$server]['no_pings']) ? $ping_status[$server]['no_pings'] : 0;
	if (! $is_alive && ! is_ip($server))
	{
		$ip			= trim(timed_exec(5, "/usr/bin/nmblookup ".escapeshellarg($server)." | /bin/head -n1 | /bin/awk '{print $1}'"));
		if (is_ip($ip))
		{
			$is_alive = (trim(exec("/bin/ping -c 1 -W 1 ".escapeshellarg($ip)." >/dev/null 2>&1; echo $?")) == 0 ) ? true : false;
		}
	}

	/* If it is not online then start counts for being offline. */
	if (! $is_alive) {
		/* Check for three consecutive negative pings before declaring it is off-line. */
		$no_pings++;
		if (($no_pings <= 3) && ($ping_status[$server]['online'] == 'yes')) {
			$is_alive = true;
		} elseif ($no_pings > 3){
			if ($mounted) {
				unassigned_log("SMB/NFS server '{$server}' is not responding to a ping and appears to be offline.");
			}
			$no_pings = 0;
		}
	} else {
		$no_pings = 0;
	}
	if ($was_alive != $is_alive) {
		$changed = true;
	} else {
		$changed = false;
	}
	$ping_status[$server] = array('no_pings' => $no_pings, 'online' => $is_alive ? 'yes' : 'no', 'changed' => $changed ? 'yes' : 'no');
	file_put_contents($tc, json_encode($ping_status));
}

/* Ping all remote servers to check for being on-line. */
function ping_servers() {
	global $config_file, $tc;

	/* Refresh the ping status. */
	$samba_mounts	= @parse_ini_file($config_file, true);
	if (is_array($samba_mounts)) {
		foreach ($samba_mounts as $device => $mount) {
			$ping_status	= is_file($tc) ? json_decode(file_get_contents($tc),true) : array();
			$server			= $mount['ip'];
			$changed		= ($ping_status[$server]['changed'] == 'yes') ? true : false;
			is_server_online($server);
			if ($changed) {
				$no_pings = $ping_status[$server]['no_pings'];
				$online = $ping_status[$server]['online'];
				$ping_status[$server] = array('no_pings' => $no_pings, 'online' => $online, 'changed' => 'no');
				file_put_contents($tc, json_encode($ping_status));
			}
		}
	}

}

/* Get the size, used, and free space on device. */
function df_status($tc, $mountpoint) {

	$df_status	= is_file($tc) ? json_decode(file_get_contents($tc), true) : array();
	$rc			= trim(timed_exec(5, "/bin/df ".escapeshellarg($mountpoint)." --output=size,used,avail | /bin/grep -v '1K-blocks' 2>/dev/null"));
	$df_status[$mountpoint] = array('timestamp' => time(), 'stats' => $rc);
	file_put_contents($tc, json_encode($df_status));
}

switch ($COMMAND) {
	case 'ping':
		ping_servers();
		break;

	case 'df_status':
		df_status($argv[2], $argv[3]);
		break;

	default:
		exit(0);
		break;
}

?>
