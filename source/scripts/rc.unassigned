#!/usr/bin/php
<?php
/* Copyright 2015, Guilherme Jardim
 * Copyright 2016-2021, Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "unassigned.devices";
$docroot = $docroot ?: @$_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
require_once("$docroot/plugins/{$plugin}/include/lib.php");

$COMMAND = $argv[1];
if ($COMMAND != 'spindown') {
	$DEVNAME = (isset($_ENV['DEVNAME'])) ? $_ENV['DEVNAME'] : ( isset($argv[2]) ? $argv[2] : NULL );
	$DEVNAME = (file_exists($DEVNAME)) ? realpath($DEVNAME) : $DEVNAME;
	$sf = $paths['dev_state'];
	if (is_file($sf) && (strpos(basename($DEVNAME), 'dev') !== false)) {
		$devs = parse_ini_file($sf, true);
		$DEVNAME = isset($devs[$DEVNAME]) ? $devs[$DEVNAME]['device'] : $DEVNAME;
	}
} else {
	$DEVNAME = $argv[2];
}

$remove = [];

/* If the DEVNAME is empty, the device is not defined - exit with an error. */
if (! $DEVNAME) {
	die("Fail: device not defined.\n");
}

/* Mount devices. */
function unassigned_mount() {
	global $DEVNAME, $paths;

	/* Mount local disks. */
	foreach(get_unassigned_disks() as $name => $disk) {
		$device = $disk['device'];
		foreach ($disk['partitions'] as $partition)
		{
			if ( preg_match("#".$DEVNAME."#i", realpath($partition)) || $DEVNAME == "auto" || $DEVNAME == "autodevices" ) {
				$info = get_partition_info($partition);

				unassigned_log("Partition found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = (strpos($k, "pass") !== false) && (strpos($k, "pass_through") === false)? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);

				/* If disk is passed through, skip to the next disk. */
				if ($info['pass_through']) {
					unassigned_log("Disk with serial '{$info['serial']}', mountpoint '".basename($info['mountpoint'])."' is set as passed through.");
					break;
				}

				/* If disk is formatting, skip to the next one. */
				if (array_values(preg_grep("@/formatting_".basename($device)."@i", listDir(dirname($paths['formatting']))))[0]) {
					break;
				}

				/* If disk is not set to auto mount, skip to the next disk. */
				if (! $info['automount'] && ( $DEVNAME == "auto" || $DEVNAME == "autodevices" || isset($_ENV['DEVNAME']) )) {
					unassigned_log("Disk with serial '{$info['serial']}', mountpoint '".basename($info['mountpoint'])."' is not set to auto mount.");

					/* Set sleep timer for this device. */
					setSleepTime($device);
					break;
				}

				/* If the device doesn't have a serial number it cannot be mounted. */
				if (! $info['serial']) {
					unassigned_log("Disk '{$device}' does not have a serial number and cannot be mounted.");
					break;
				}

				/* If partition does not have a file system it cannot be mounted. */
				if (! $info['fstype']) {
					unassigned_log("Partition '{$info['device']}' does not have a file system and cannot be mounted.");
					continue;
				}

				/* See if the mountpoint is a duplicate reserved, share, or UD name. Don't mount if a duplicate.*/
				if (! check_for_duplicate_share(($info['fstype'] == "crypto_LUKS" ? $info['luks'] :  $info['device']), basename($info['mountpoint']), $info['fstype'])) {
					unassigned_log("Disk with serial '{$info['serial']}', mountpoint '".basename($info['mountpoint'])."' cannot be mounted.");

					/* Execute device script with error mounting action. */
					execute_script($info, "ERROR_MOUNT");
					continue;
				}

				if ($info['device']) {
					unassigned_log("Disk found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = ((strpos($k, "pass") !== false) && (strpos($k, "pass_through") === false)) ? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);
					unassigned_log("Adding disk '{$info['device']}'...");

					/* Create the mounting status file for this device. */
					if ($info['fstype'] != "crypto_LUKS") {
						addFile(sprintf($paths['mounting'], basename($info['device'])));
					} else {
						addFile(sprintf($paths['mounting'], basename($info['luks'])));
					}

					unassigned_log("Mounting partition '{$info['device']}' at mountpoint '{$info['mountpoint']}'...");

					/* Mount the disk. */
					if (do_mount( $info )) 
					{
						$attrs = (isset($_ENV['DEVTYPE'])) ? get_udev_info($device, $_ENV) : get_udev_info($device, NULL);

						/* Add smb and nfs shares for this device. */
						if (config_shared( $info['serial'], $info['part'], strpos($attrs['DEVPATH'], "usb"))) {
							add_smb_share($info['mountpoint']);
							add_nfs_share($info['mountpoint']);
						}

						/* Set sleep timer for this device. */
						setSleepTime($device);

						/* Execute device script with add action. */
						execute_script($info, "ADD");

						/* Update the partition info. */
						$info = get_partition_info($partition);
						export_disk($info, true);
					} elseif (! is_mounted($info['device'])) {
						/* There was an error mounting the disk. */
						unassigned_log("Partition '{$info['label']}' cannot be mounted.");

						/* Set sleep timer for this device. */
						setSleepTime($device);

						/* Execute device script with error unmount action. */
						execute_script($info, "ERROR_MOUNT");
					}
				} else {
					unassigned_log("Error: Cannot mount null device with serial '{$info['serial']}'.");
				}
			}
		}
	}

	/* Mount Remote SMB/NFS mounts. */
	if (strpos($DEVNAME, "//") === 0 || strpos($DEVNAME, ":/") || $DEVNAME == "auto" || $DEVNAME == "autoshares") {
		foreach (get_samba_mounts() as $info) {
			$device = $info['device'];
			if ( $DEVNAME == $device || $DEVNAME == "auto" || $DEVNAME == "autoshares" ) {

				/* if remote mount is not set to auto mount, go to the next one. */
				if (! $info['automount'] && ($DEVNAME == "auto" || $DEVNAME == "autoshares")) {
					unassigned_log("Remote SMB/NFS mount '{$info['device']}' is not set to auto mount.");
					continue;
				}

				/* See if the mountpoint is a duplicate reserved, share, or UD name. Don't mount if a duplicate.*/
				if (! check_for_duplicate_share($info['device'], basename($info['mountpoint']), $info['fstype'])) {
					unassigned_log("Remote SMB/NFS mount '{$info['device']}' cannot be mounted.");

					/* Execute device script with error mounting action. */
					execute_script($info, "ERROR_MOUNT");
					continue;
				}

				unassigned_log("Remote SMB/NFS share found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = ((strpos($k, "pass") !== false) || ((strpos($k, "user") !== false) && (strpos($k, "user_command") === false))) ? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);

				/* Remove any special characters. */
				$mount_device = basename($info['device'])."_".$info['fstype'];

				/* Create mounting status file. */
				addFile(sprintf($paths['mounting'], $mount_device));

				unassigned_log("Mounting Remote SMB/NFS Share '{$info['device']}'...");

				/* Mount the remote share. */
				if (do_mount( $info )) {
					if ($info['smb_share']) {
						/* Add smb share for the remote share. */
						add_smb_share($info['mountpoint'], false);

						/* Update the samba mount status. */
						foreach (get_samba_mounts() as $info) {
							$device = $info['device'];
							if ( $DEVNAME == $device ) {
								export_disk($info, true);
								break;
							}
						}
					}

					/* Execute remote mount script with add action. */
					execute_script($info, "ADD");
				} else {
					/* Execute remote mount script with error mount action. */
					execute_script($info, "ERROR_MOUNT");
				}
			}
		}
	}

	/* Mount ISO File mounts. */
	if (strpos($DEVNAME, "/mnt") === 0 || $DEVNAME == "auto" || $DEVNAME == "autodevices") {
		foreach (get_iso_mounts() as $info) {
			$device = $info['device'];
			if ( $DEVNAME == $device || $DEVNAME == "auto" || $DEVNAME == "autodevices" ) {

				/* If iso mount is not set to auto mount, skip to the next one. */
				if (! $info['automount'] && ($DEVNAME == "auto" || $DEVNAME == "autodevices")) {
					unassigned_log("ISO File mount '{$info['device']}' is not set to auto mount.");
					continue;
				}

				/* See if the mountpoint is a duplicate reserved, share, or UD name. Don't mount if a duplicate.*/
				if (! check_for_duplicate_share($info['device'], basename($info['mountpoint']), $info['fstype'])) {
					unassigned_log("ISO File mount '{$info['device']}' cannot be mounted.");

					/* Execute device script with error mounting action. */
					execute_script($info, "ERROR_MOUNT");
					continue;
				}

				unassigned_log("ISO File share found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = (strpos($k, "pass") !== false) ? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);

				/* Remove any special characters. */
				$mount_device = basename($info['device']);

				/* Create mounting status file. */
				addFile(sprintf($paths['mounting'], $mount_device));

				unassigned_log("Mounting ISO File '{$info['device']}'...");

				/* Mount the iso file. */
				if (do_mount( $info )) {
					/* Add smb and nfs shares for the iso file. */
					add_smb_share($info['mountpoint'], false);
					add_nfs_share($info['mountpoint']);

					/* Execute iso file script with add action. */
					execute_script($info, "ADD");

					/* Update the iso mount status. */
					foreach (get_iso_mounts() as $info) {
						$device = $info['device'];
						if ( $DEVNAME == $device ) {
							export_disk($info, true);
							break;
						}
					}
				} else {

					/* Execute ios file script with error mount action. */
					execute_script($info, "ERROR_MOUNT");
				}
			}
		}
	}

	/* Tell Unraid to update devs.ini file of unassigned devices. */
	if (isset($_ENV['DEVTYPE']) && ($_ENV['DEVTYPE'] == "partition")) {
		@touch($paths['hotplug_event']);
	}
}

/* Unmount devices. */
function unassigned_umount() {
	global $DEVNAME, $paths;

	$force = ($DEVNAME == "all") ? true : false;

	/* Unmount local disks. */
	foreach(get_unassigned_disks() as $disk) {
		$device = $disk['device'];
		foreach ($disk['partitions'] as $partition) {
			if ( preg_match("#".$DEVNAME."#i", realpath($partition)) || $DEVNAME == "auto" || $DEVNAME == "all" ) {
				$info = get_partition_info($partition);
				if (! $info['automount'] && $DEVNAME == "auto" ) {
					continue;
				}

				unassigned_log("Partition found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = (strpos($k, "pass") !== false) ? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);

				/* Cannot unmount disk with 'UNRAID' label. */
				if ($info['label'] == "UNRAID") {
					unassigned_log("Error: Cannot unmount device '{$info['device']}' with label 'UNRAID'.");

					/* Execute device script with error unmount action. */
					execute_script($info, "ERROR_UNMOUNT");
				} else {
					/* If the device is mounted, unmount it. */
					if ( is_mounted($info['device']) )
					{
						/* Create unmounting status file for this device. */
						if ($info['fstype'] != "crypto_LUKS") {
							addFile(sprintf($paths['unmounting'], basename($info['device'])));
						} else {
							addFile(sprintf($paths['unmounting'], basename($info['luks'])));
						}

						/* Set sleep timer for this device. */
						setSleepTime($device);

						/* Remove smb and nfs shares for this device. */
						if ( rm_smb_share($info['target']) && rm_nfs_share($info['target']) ) {
							/* Execute device script with unmlount action. */
							execute_script($info, "UNMOUNT");

							unassigned_log("Unmounting partition '{$info['device']}' at mountpoint '{$info['mountpoint']}'...");

							/* Unmount the device. */
							if ( do_unmount($info['device'], $info['mountpoint']) ) {
								if ($info['fstype'] == "crypto_LUKS" ) {
									shell_exec("/sbin/cryptsetup luksClose ".basename($info['device']));
								}

								/* Execute device script with remove actioon. */
								execute_script($info, "REMOVE");
								export_disk($info, false);
							} else {
								unassigned_log("Disk '{$info['label']}' cannot be unmounted.");

								/* Execute device script with error unmount action. */
								execute_script($info, "ERROR_UNMOUNT");
							}
						}
					}
				}
			}
		}
	}

	/* Unmount Remote SMB/NFS mounts. */
	if (strpos($DEVNAME, "//") === 0 || strpos($DEVNAME, ":/") || $DEVNAME == "auto" || $DEVNAME == "all") {
		foreach (get_samba_mounts() as $info) {
			$device = $info['device'];
			if ( $DEVNAME == $device || $DEVNAME == "auto" || $DEVNAME == "all" ) {
				if (! $info['automount'] && $DEVNAME == "auto" ) {
					continue;
				}
				unassigned_log("Remote SMB/NFS share found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = (strpos($k, "pass") !== false) ? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);

				$force = $info['is_alive'] ? $force : true;

				/* Unmount the remote share if it is mounted. */
				if ( is_mounted(($info['fstype'] == "cifs") ? "//".$info['ip']."/".$info['path'] : $info['device']) ) {
					/* Remove special characters. */
					$mount_device = basename($info['device'])."_".$info['fstype'];

					/* Create unmounting status file. */
					addFile(sprintf($paths['unmounting'], $mount_device));

					unassigned_log("Removing Remote SMB/NFS share '{$info['device']}'...");

					/* Execute the remote mount script file with unmount action. */
					execute_script($info, "UNMOUNT");

					unassigned_log("Unmounting Remote SMB/NFS Share '{$info['device']}'...");

					$smb = $info['fstype'] == "cifs" ? true : false;
					$nfs = $info['fstype'] == "nfs" ? true : false;

					/* Unmount the remote share. */
					if ( do_unmount(($info['fstype'] == "cifs") ? "//".$info['ip']."/".$info['path'] : $info['device'], $info['mountpoint'], $force, $smb, $nfs) ) {
						if ( rm_smb_share($info['mountpoint']) ) {
							/* Execute remote mount script with remove action. */
							execute_script($info, "REMOVE");
							export_disk($info, false);
						}
					} else {
						/* Execute remote mount script with error unmount action. */
						execute_script($info, "ERROR_UNMOUNT");
					}
				} else {
					unassigned_log("Remote SMB/NFS share '{$info['device']}' is not mounted.");
				}
			}
		}
	}

	/* Unmount ISO File mounts. */
	if (strpos($DEVNAME, "/mnt") === 0 || $DEVNAME == "auto" || $DEVNAME == "all") {
		foreach (get_iso_mounts() as $info) {
			$device = $info['device'];
			if ( $DEVNAME == $device || $DEVNAME == "auto" || $DEVNAME == "all" ) {
				if (! $info['automount'] && $DEVNAME == "auto" ) {
					continue;
				}
				unassigned_log("ISO File share found with the following attributes: ".(implode(', ', array_map(function($v, $k){$v = (strpos($k, "pass") !== false) ? "*******" : $v; return "$k='$v'"; }, $info, array_keys($info)))), 1);

				/* If iso file is mounted, unmlount it. */
				if ( is_mounted($info['device']) ) {
					/* Create mounting status file. */
					addFile(sprintf($paths['unmounting'], basename($info['device'])));

					unassigned_log("Removing ISO File share '{$info['device']}'...");

					/* Execute iso script file with actyion unmount. */
					execute_script($info, "UNMOUNT");

					unassigned_log("Unmounting ISO File '{$info['device']}'...");

					/* Unmount the iso file. */
					if ( do_unmount($info['device'], $info['mountpoint'], $force) ) {
						/* Remove the smb and nfs shares. */
						if ( rm_smb_share($info['mountpoint']) && rm_nfs_share($info['mountpoint']) ) {
							/* Execute the iso file script with the remove action. */
							execute_script($info, "REMOVE");
							export_disk($info, false);
						}
					} else {
						/* Execute the iso script with the error unmount action. */
						execute_script($info, "ERROR_UNMOUNT");
					}
				} else {
					unassigned_log("Remote ISO File share '{$info['device']}' is not mounted.");
				}
			}
		}
	}

	/* Set flag to tell Unraid to update devs.ini file of unassigned devices. */
	if (isset($_ENV['DEVTYPE']) && ($_ENV['DEVTYPE'] == "disk")) {
		@touch($paths['hotplug_event']);
	}
}

/* Update udev disk info. */
function unassigned_reload() {
	if (isset($_ENV['DEVLINKS'])) {
		foreach (explode(" ", $_ENV['DEVLINKS']) as $link) {
			get_udev_info($link, $_ENV);
		}

		/* Set flag to tell Unraid to update devs.ini file of unassigned devices. */
		@touch($paths['hotplug_event']);
	}
}

/* Spin down a disk using Unraid api. */
function unassigned_spin_down() {
	global $DEVNAME;

	$dev = basename($DEVNAME);
	MiscUD::spin_disk(true, $dev);
}

/* Add status file so mount buttons will show current status of operation. */
function addFile($file)
{
	global $remove;

	$file = safe_name($file);

	@touch($file);
	$remove[] = $file;
}

/* Update json mounted disk status. */
function export_disk($disk, $add) {
	global $paths;

	$info	= MiscUD::get_json($paths['mounted']);
	$dev	= $disk['device'];
	if ($add)
	{
		if (isset($disk["pass"])) {
			unset($disk["pass"]);
		}
		$info[$dev] = $disk;
	}
	else
	{
		unset($info[$dev]);
	}

	MiscUD::save_json($paths['mounted'], $info);	
}

switch ($COMMAND) {
	case 'mount':
		unassigned_mount();
		break;

	case 'umount':
		unassigned_umount();
		break;

	case 'reload':
		unassigned_reload();
		break;

	case 'spindown':
		unassigned_spin_down();
		break;

	case 'refresh':
		break;

	default:
		unassigned_log("Error: 'rc.unassigned {$argv[1]} {$argv[2]}' not understood");
		unassigned_log("rc.unassigned usage: 'mount', 'umount', 'reload', 'spindown', 'refresh'");
		exit(0);
		break;
}

array_map(function($f){@unlink($f);}, $remove);
?>
